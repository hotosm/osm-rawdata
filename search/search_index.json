{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OSM RawData","text":"<p> A python module for accessing OSM data in a postgres database. </p> <p> </p> <p>\ud83d\udcd6 Documentation: https://hotosm.github.io/osm-rawdata/</p> <p>\ud83d\udda5\ufe0f Source Code: https://github.com/hotosm/osm-rawdata</p> <p>These is a module to work with OpenStreetMap data using postgres and a custom database schema. This code is derived from the HOT Export Tool, osm-fieldwork, and Underpass, and the Raw Data API, which is the new FastAPI backend for the HOT Export Tool.</p> <p>Since multiple projects need to do data extracts from OpenStreetMap in a flexible way, this was designed to have a single body of code to maintain.</p>"},{"location":"#installation","title":"Installation","text":"<p>To install osm-rawdata, you can use pip. Here are two options:</p> <ul> <li> <p>Directly from the main branch:   <code>pip install git+https://github.com/hotosm/osm-rawdata.git</code></p> </li> <li> <p>Latest on PyPi:   <code>pip install osm-rawdata</code></p> </li> <li> <p>Including the packages required for <code>importer.py</code>:   <code>pip install osm-rawdata[importer]</code></p> </li> </ul> <p>NOTE that importer.py will not work unless the extra dependencies are specified using osm-rawdata[importer]</p>"},{"location":"#using-the-container-image","title":"Using the Container Image","text":"<ul> <li>osm-rawdata scripts can be used via the pre-built container images.</li> <li>These images come with all dependencies bundled, so are simple to run.</li> </ul> <p>Run a specific command:</p> <pre><code>docker run --rm -v $PWD:/data ghcr.io/hotosm/osm-rawdata:latest geofabrik &lt;flags&gt;\n</code></pre> <p>Run interactively (to use multiple commands):</p> <pre><code>docker run --rm -it -v $PWD:/data ghcr.io/hotosm/osm-rawdata:latest\n</code></pre> <p>Note: the output directory should always be /data/... to persist data.</p>"},{"location":"#the-database-schema","title":"The Database Schema","text":"<p>This project is heavily dependant on postgres and postgis. This schema was optimized for data anaylsis more than display purposes. The traditional schema use for OSM shows how it has evolved over the years. Some tags are columns (usually empty), and others get put into an hstore tag column where they have to be accessed directly. One big change in this datbase schema is all the tags are in a single column, reducing the data size considerably, while also being easier to query in a consistent manner. In the past a developer had to keep track of what was a column, and what was in the tags column, which was inefficient.</p> <p>This schema has 4 tables, similar to the traditional ones. OSM data is imported using osm2pgsql but uses a lua script to create the custom schema. This module's usage is all read-only, as Underpass can keep the raw data updated every minute, and we just want to access that data.</p> <p>Things get more interesting as this module supports both a local database and a remote one. They use different query languages. To simplify this, a configuration file is used, which then generates the proper query syntax.</p>"},{"location":"#the-config-file","title":"The Config File","text":"<p>This reads in two different formats that describe the eventualy SQL query. The YAML format was originally used by Export Tool, but later abandoned for a JSON format. The YAML format was adopted by the osm-fieldwork project before this transistion happened, so uses an enhanced version to define the queries.</p> <p>The JSON format is also supported, both parsing the config file and also generating that query from a YAML config file.</p>"},{"location":"#the-files","title":"The Files","text":""},{"location":"#geofabrikpy","title":"geofabrik.py","text":"<p>This is a simple utility to download a file from GeoGFabrik.</p>"},{"location":"#configpy","title":"config.py","text":"<p>This class parses either then JSON or YAML config file formatted files, and creates a data structure used later to generater the database query.</p>"},{"location":"#postgrespy","title":"postgres.py","text":"<p>This class handles working with the postgres database. It sets up the connections, and handles processing the results from the queries.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#042-2025-02-03","title":"0.4.2 (2025-02-03)","text":""},{"location":"CHANGELOG/#fix","title":"Fix","text":"<ul> <li>extra log info on raw-data-api FAILURE response</li> <li>replace pysmartdl with requests-based geofabrik download</li> </ul>"},{"location":"CHANGELOG/#041-2024-12-09","title":"0.4.1 (2024-12-09)","text":""},{"location":"CHANGELOG/#fix_1","title":"Fix","text":"<ul> <li>remove convex hull to avoid getting features outside aoi (#41)</li> </ul>"},{"location":"CHANGELOG/#040-2024-10-24","title":"0.4.0 (2024-10-24)","text":""},{"location":"CHANGELOG/#033-2024-10-14","title":"0.3.3 (2024-10-14)","text":""},{"location":"CHANGELOG/#fix_2","title":"Fix","text":"<ul> <li>geofabrik hyphenated region path (#33)</li> </ul>"},{"location":"CHANGELOG/#refactor","title":"Refactor","text":"<ul> <li>move raw-data import related scripts to subdir</li> </ul>"},{"location":"CHANGELOG/#032-2024-08-12","title":"0.3.2 (2024-08-12)","text":""},{"location":"CHANGELOG/#fix_3","title":"Fix","text":"<ul> <li>raw-data-api changed Export.geojson --&gt; RawExport.geojson (#30)</li> <li>allow raw-data-api call to return if FAILURE response</li> <li>param spelling mistake PostgresClient.url --&gt; .uri</li> </ul>"},{"location":"CHANGELOG/#031-2024-08-05","title":"0.3.1 (2024-08-05)","text":""},{"location":"CHANGELOG/#fix_4","title":"Fix","text":"<ul> <li>do not continue to poll raw-data-api on failure (#28)</li> <li>Add AS geometry to make parsing the results cleaner, fix duplicate columns in SELECT (#25)</li> <li>Fix typo, args.uri, not args.url (#22)</li> <li>Process the refs for ways when using a local database (#20)</li> </ul>"},{"location":"CHANGELOG/#refactor_1","title":"Refactor","text":"<ul> <li>revert default line length 132 --&gt; 88 char</li> </ul>"},{"location":"CHANGELOG/#030-2024-05-20","title":"0.3.0 (2024-05-20)","text":""},{"location":"CHANGELOG/#feat","title":"Feat","text":"<ul> <li>update env var UNDERPASS_API_URL --&gt; RAW_DATA_API_URL</li> </ul>"},{"location":"CHANGELOG/#024-2024-04-07","title":"0.2.4 (2024-04-07)","text":""},{"location":"CHANGELOG/#fix_5","title":"Fix","text":"<ul> <li>return None if raw-data-api error dict response (log error)</li> <li>improve check for raw-data-api success</li> </ul>"},{"location":"CHANGELOG/#023-2024-02-15","title":"0.2.3 (2024-02-15)","text":""},{"location":"CHANGELOG/#fix_6","title":"Fix","text":"<ul> <li>improve yaml config parsing edge cases</li> </ul>"},{"location":"CHANGELOG/#refactor_2","title":"Refactor","text":"<ul> <li>better index handling for postgres get geom types</li> </ul>"},{"location":"CHANGELOG/#022-2024-02-14","title":"0.2.2 (2024-02-14)","text":""},{"location":"CHANGELOG/#fix_7","title":"Fix","text":"<ul> <li>handle both yaml and json BytesIO PostgresClient config</li> <li>handle empty tags in yaml format (not null)</li> <li>reading of bytesio config file seeking</li> <li>case when geometry is not set during init</li> <li>Move GetRecordCount() and getPage() here as they're now asyncpg specific</li> <li>allow parsing geojson string for execQuery</li> </ul>"},{"location":"CHANGELOG/#refactor_3","title":"Refactor","text":"<ul> <li>fix linting errors for config.py</li> <li>remove clip_to_aoi option (default in raw-data-api)</li> </ul>"},{"location":"CHANGELOG/#021-2024-02-09","title":"0.2.1 (2024-02-09)","text":""},{"location":"CHANGELOG/#fix_8","title":"Fix","text":"<ul> <li>improve robustness of raw data api polling checks</li> </ul>"},{"location":"CHANGELOG/#refactor_4","title":"Refactor","text":"<ul> <li>formatting for pre-commit</li> <li>cleanup http basic auth reference in DatabaseAccess</li> </ul>"},{"location":"CHANGELOG/#020-2024-02-09","title":"0.2.0 (2024-02-09)","text":""},{"location":"CHANGELOG/#feat_1","title":"Feat","text":"<ul> <li>allow passing extra param to execQuery (for direct URL access) (#14)</li> <li>allow passing bytesio object as json/yaml config (#13)</li> <li>update queryRemote polling interval logic</li> <li>allow passing of BytesIO config to PostgresClient</li> <li>allow parsing of bytesio json/yaml config</li> </ul>"},{"location":"CHANGELOG/#fix_9","title":"Fix","text":"<ul> <li>Add execute() method</li> <li>Drop debug statement</li> <li>return bytesio data if not geojson and zipped</li> <li>only clip_to_aoi for Polygons, retail other geoms</li> <li>New version of the PostgresClient to use asyncpg iinstead of psycopg2</li> <li>improve handling for queryExec + reduce poll to 2s</li> <li>update underpass default url</li> <li>incorrect handling of dbshell.close() if not exists</li> <li>allow parsing of bytesio json/yaml config</li> <li>json parsing if index out of range</li> <li>Add destructor to close postgres connection, handle list of tag values insted of just \"not null\"</li> <li>Make less verbose</li> <li>reverse logic when testing for a closed connection</li> </ul>"},{"location":"CHANGELOG/#refactor_5","title":"Refactor","text":"<ul> <li>add error log if max polling duration reached</li> </ul>"},{"location":"CHANGELOG/#017-2023-12-05","title":"0.1.7 (2023-12-05)","text":""},{"location":"CHANGELOG/#fix_10","title":"Fix","text":"<ul> <li>Add method to create tables in the database</li> </ul>"},{"location":"CHANGELOG/#016-2023-11-18","title":"0.1.6 (2023-11-18)","text":""},{"location":"CHANGELOG/#fix_11","title":"Fix","text":"<ul> <li>Use style that preserves refs for ways</li> <li>Add link to overture doc</li> <li>Add lua file that preserves refs</li> <li>Add method for creating a table in a database</li> </ul>"},{"location":"CHANGELOG/#015-2023-11-10","title":"0.1.5 (2023-11-10)","text":""},{"location":"CHANGELOG/#fix_12","title":"Fix","text":"<ul> <li>Add .scalar_subquery to get rid of the warning message</li> <li>Add the two new utilities</li> <li>Add more details on the data files</li> <li>Add support for importing multipolygons</li> <li>Depending on the version of dependant libraries, we need to set the SRID as it's not always set</li> <li>Don't try to process data if the list is empty</li> <li>Wrap reading parquet file with try/except since sometimes pyarrow core dumps</li> <li>Remove commented out code blocks, don't add OSM or MS buildings when importing Overture data as it's already out of date</li> <li>Oope, reenable mutli-threading</li> <li>Use new Overture class, which handles all the schema variations for Overture V2 data formatted files</li> <li>Add more content on Overture data files</li> <li>Support parsing all the different Overture data files</li> </ul>"},{"location":"CHANGELOG/#014-2023-10-23","title":"0.1.4 (2023-10-23)","text":""},{"location":"CHANGELOG/#fix_13","title":"Fix","text":"<ul> <li>Parser for Overture data files V2</li> <li>Add importer script</li> <li>Fix spelling of parquet</li> <li>Remove extraneous timer.stop()</li> <li>Make importing parquet files from Overture multi-threaded</li> <li>Add timer for import GeoJson</li> <li>Import MS Footprints into underpass schema</li> <li>Import uriParse from rawdata instead of the local copy</li> <li>If no config file is used, return the raw results</li> <li>Add content on importing Overture data into a database</li> <li>Add simple pages for all the utilities, add doc on the Overture data files</li> </ul>"},{"location":"CHANGELOG/#refactor_6","title":"Refactor","text":"<ul> <li>rename LICENSE.md --&gt; LICENSE</li> <li>update version in Makefile &amp; track</li> </ul>"},{"location":"CHANGELOG/#013-2023-10-09","title":"0.1.3 (2023-10-09)","text":""},{"location":"CHANGELOG/#fix_14","title":"Fix","text":"<ul> <li>add required psycopg2 dep prior to version bump</li> </ul>"},{"location":"CHANGELOG/#012-2023-10-09","title":"0.1.2 (2023-10-09)","text":""},{"location":"CHANGELOG/#fix_15","title":"Fix","text":"<ul> <li>config.py handle yaml with join_ and without</li> <li>checking for 'not null' in where items</li> <li>Add missing double quote</li> <li>Fix help line about program</li> <li>Fix pedantic error</li> <li>Oops, delete apidocs, since they are auto generated</li> <li>Update docs</li> <li>Use the same version of sqlalchemy for all other dependencies</li> <li>make id column autoincrement, there is no OSM ID as we ignore the out of date OSM data, and the other data has a record field, which is put in tags</li> <li>Add SRID to geometry</li> <li>Add more dependencies</li> <li>clip to boundary</li> <li>Create the database and tables from scratch, modify importParquet to handle the changes</li> <li>Parse the array for source to get the data source and ID</li> <li>Use AGPLv3, not GPLv3</li> <li>Add building=yes to we can query them</li> <li>Ikport parquer files into postgres using the Underpass schema</li> <li>Import parquet file into postgres using the underpass schema</li> <li>Use the new db_models for the database</li> <li>Add sqlalchemy model for our raw database schema</li> <li>Rename models.py to db_models.py</li> <li>Sigh... use sqlalchemy to create the Underpass schema for external datasets</li> <li>Break big SQL dumop into tables</li> <li>Add SQL schema for external data files</li> <li>Add new program to import files from geofabrik into postgres</li> <li>Remove more trailing spaces</li> <li>Remove trailing spaces</li> <li>Move file to directory so it gets installed</li> <li>Add the custom Underpass database schema</li> </ul>"},{"location":"CHANGELOG/#refactor_7","title":"Refactor","text":"<ul> <li>remove refs to sqlmodel (using sqlalchemy)</li> <li>minor typos, renaming, docstrings</li> <li>split parseYaml into separate methods for clarity</li> </ul>"},{"location":"CHANGELOG/#012rc0-2023-09-11","title":"0.1.2rc0 (2023-09-11)","text":""},{"location":"CHANGELOG/#fix_16","title":"Fix","text":"<ul> <li>UNDERPASS_API --&gt; UNDERPASS_API_URL</li> </ul>"},{"location":"CHANGELOG/#011-2023-09-11","title":"0.1.1 (2023-09-11)","text":""},{"location":"CHANGELOG/#fix_17","title":"Fix","text":"<ul> <li>add output file for testing</li> <li>Improve handling of 'not null' in the JSON format</li> <li>Fix pattern in test case for SQL</li> <li>store the uri so other code can get the components</li> <li>Improve test case to handle SQL and JSON outout</li> <li>Add AOI for testing, add test case for SQL and JOSN output</li> <li>minor cleanup, init shouldn't return anything</li> <li>move out of subdirectory so it gets installed by pip</li> <li>Rename test case to be more accurate</li> <li>Generating JSON for Underpass works</li> <li>now generates the filters for the JSON output</li> <li>Works with Underpass now with attributes, adding filters next</li> <li>Modify test case to wotj with recent changes to the data structure</li> <li>Improved JSON parser, producews queries that work with a local postgres</li> <li>Add simple target to lint code</li> <li>Improve parsing of JSON files for rwa-data-api backend</li> <li>add comment to keep pylint happy</li> <li>Add the op to each item when parsing JSON</li> <li>Parsing the enhanced YAML format, and generating working SQL queries</li> <li>Improve debug messages</li> <li>Add support for Doxygen and pyreverse</li> <li>Improve YAML parsing for enhanced schema</li> <li>Read custom SQL from a file and execute it</li> <li>Add blank line to be consistent</li> <li>Improve JSON parsing with new test files, update test case</li> <li>Remoce extraneous spaces in the values list</li> <li>Improved parsing of JSON file with multiple levels and geometries</li> <li>more support for parsing the new json test data files</li> <li>Fix getting the path from the right project</li> <li>Add pyaml</li> <li>DOn't list *~ for git status</li> <li>Don't use renamed module to find the root path for files</li> <li>Rename test case</li> <li>Fix bogus import</li> <li>Add useless minimal testcase to keep github workflows happy</li> <li>Fix print statement</li> <li>Add JSON queries for Underpass,   pulled out of the raw-data-api backend for Export Tool</li> <li>Add mkdocstrings-python as a dependency</li> <li>Add mkdoc strings to the classes and methods</li> <li>Add a minimal set of pages to handle API docs using mkdocs</li> <li>Add config file for mkdocs</li> <li>Now produces an SQL query for a local data from either config source,   or the remote raw database</li> <li>more doc updates and drop apt update from yml</li> <li>Try to get docs to publich to the wiki</li> <li>Hardcode the org name</li> <li>Update the github wiki for doc changes</li> <li>Add page on JSON format</li> <li>Add sidebar for wiki</li> <li>Add basic files for all projects</li> <li>Add doc on the YAML file format, and a home page for the wiki</li> <li>Add GPL license</li> <li>Intial config file so this installs</li> <li>Add code that actually does something</li> <li>Add some initial config files</li> <li>Add some content</li> </ul>"},{"location":"LICENSE/","title":"GNU AFFERO GENERAL PUBLIC LICENSE","text":"<p>Version 3, 19 November 2007</p> <p>Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>"},{"location":"LICENSE/#preamble","title":"Preamble","text":"<p>The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users.</p> <p>When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software.</p> <p>A secondary benefit of defending all users' freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate. Many developers of free software are heartened and encouraged by the resulting cooperation. However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public.</p> <p>The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community. It requires the operator of a network server to provide the source code of the modified version running there to the users of that server. Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version.</p> <p>An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals. This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p>"},{"location":"LICENSE/#terms-and-conditions","title":"TERMS AND CONDITIONS","text":""},{"location":"LICENSE/#0-definitions","title":"0. Definitions","text":"<p>\"This License\" refers to version 3 of the GNU Affero General Public License.</p> <p>\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations.</p> <p>To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.</p> <p>A \"covered work\" means either the unmodified Program or a work based on the Program.</p> <p>To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p>"},{"location":"LICENSE/#1-source-code","title":"1. Source Code","text":"<p>The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work.</p> <p>A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p>"},{"location":"LICENSE/#2-basic-permissions","title":"2. Basic Permissions","text":"<p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.</p>"},{"location":"LICENSE/#3-protecting-users-legal-rights-from-anti-circumvention-law","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law","text":"<p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p>"},{"location":"LICENSE/#4-conveying-verbatim-copies","title":"4. Conveying Verbatim Copies","text":"<p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p>"},{"location":"LICENSE/#5-conveying-modified-source-versions","title":"5. Conveying Modified Source Versions","text":"<p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <ul> <li>a) The work must carry prominent notices stating that you modified   it, and giving a relevant date.</li> <li>b) The work must carry prominent notices stating that it is   released under this License and any conditions added under   section 7. This requirement modifies the requirement in section 4   to \"keep intact all notices\".</li> <li>c) You must license the entire work, as a whole, under this   License to anyone who comes into possession of a copy. This   License will therefore apply, along with any applicable section 7   additional terms, to the whole of the work, and all its parts,   regardless of how they are packaged. This License gives no   permission to license the work in any other way, but it does not   invalidate such permission if you have separately received it.</li> <li>d) If the work has interactive user interfaces, each must display   Appropriate Legal Notices; however, if the Program has interactive   interfaces that do not display Appropriate Legal Notices, your   work need not make them do so.</li> </ul> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>"},{"location":"LICENSE/#6-conveying-non-source-forms","title":"6. Conveying Non-Source Forms","text":"<p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <ul> <li>a) Convey the object code in, or embodied in, a physical product   (including a physical distribution medium), accompanied by the   Corresponding Source fixed on a durable physical medium   customarily used for software interchange.</li> <li>b) Convey the object code in, or embodied in, a physical product   (including a physical distribution medium), accompanied by a   written offer, valid for at least three years and valid for as   long as you offer spare parts or customer support for that product   model, to give anyone who possesses the object code either (1) a   copy of the Corresponding Source for all the software in the   product that is covered by this License, on a durable physical   medium customarily used for software interchange, for a price no   more than your reasonable cost of physically performing this   conveying of source, or (2) access to copy the Corresponding   Source from a network server at no charge.</li> <li>c) Convey individual copies of the object code with a copy of the   written offer to provide the Corresponding Source. This   alternative is allowed only occasionally and noncommercially, and   only if you received the object code with such an offer, in accord   with subsection 6b.</li> <li>d) Convey the object code by offering access from a designated   place (gratis or for a charge), and offer equivalent access to the   Corresponding Source in the same way through the same place at no   further charge. You need not require recipients to copy the   Corresponding Source along with the object code. If the place to   copy the object code is a network server, the Corresponding Source   may be on a different server (operated by you or a third party)   that supports equivalent copying facilities, provided you maintain   clear directions next to the object code saying where to find the   Corresponding Source. Regardless of what server hosts the   Corresponding Source, you remain obligated to ensure that it is   available for as long as needed to satisfy these requirements.</li> <li>e) Convey the object code using peer-to-peer transmission,   provided you inform other peers where the object code and   Corresponding Source of the work are being offered to the general   public at no charge under subsection 6d.</li> </ul> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p>"},{"location":"LICENSE/#7-additional-terms","title":"7. Additional Terms","text":"<p>\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <ul> <li>a) Disclaiming warranty or limiting liability differently from the   terms of sections 15 and 16 of this License; or</li> <li>b) Requiring preservation of specified reasonable legal notices or   author attributions in that material or in the Appropriate Legal   Notices displayed by works containing it; or</li> <li>c) Prohibiting misrepresentation of the origin of that material,   or requiring that modified versions of such material be marked in   reasonable ways as different from the original version; or</li> <li>d) Limiting the use for publicity purposes of names of licensors   or authors of the material; or</li> <li>e) Declining to grant rights under trademark law for use of some   trade names, trademarks, or service marks; or</li> <li>f) Requiring indemnification of licensors and authors of that   material by anyone who conveys the material (or modified versions   of it) with contractual assumptions of liability to the recipient,   for any liability that these contractual assumptions directly   impose on those licensors and authors.</li> </ul> <p>All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p>"},{"location":"LICENSE/#8-termination","title":"8. Termination","text":"<p>You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p>"},{"location":"LICENSE/#9-acceptance-not-required-for-having-copies","title":"9. Acceptance Not Required for Having Copies","text":"<p>You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p>"},{"location":"LICENSE/#10-automatic-licensing-of-downstream-recipients","title":"10. Automatic Licensing of Downstream Recipients","text":"<p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p>"},{"location":"LICENSE/#11-patents","title":"11. Patents","text":"<p>A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\".</p> <p>A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p>"},{"location":"LICENSE/#12-no-surrender-of-others-freedom","title":"12. No Surrender of Others' Freedom","text":"<p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p>"},{"location":"LICENSE/#13-remote-network-interaction-use-with-the-gnu-general-public-license","title":"13. Remote Network Interaction; Use with the GNU General Public License","text":"<p>Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph.</p> <p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License.</p>"},{"location":"LICENSE/#14-revised-versions-of-this-license","title":"14. Revised Versions of this License","text":"<p>The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU Affero General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p>"},{"location":"LICENSE/#15-disclaimer-of-warranty","title":"15. Disclaimer of Warranty","text":"<p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>"},{"location":"LICENSE/#16-limitation-of-liability","title":"16. Limitation of Liability","text":"<p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>"},{"location":"LICENSE/#17-interpretation-of-sections-15-and-16","title":"17. Interpretation of Sections 15 and 16","text":"<p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"LICENSE/#how-to-apply-these-terms-to-your-new-programs","title":"How to Apply These Terms to Your New Programs","text":"<p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source. For example, if your program is a web application, its interface could display a \"Source\" link that leads users to an archive of the code. There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements.</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see https://www.gnu.org/licenses/.</p>"},{"location":"about/","title":"osm-rawdata","text":"<p>\ud83d\udcd6 Documentation</p> <p>These is a module to work with OpenStreetMap data using postgres and a custom database schema. This code is derived from the HOT Export Tool, osm-fieldwork, and Underpass, and the Raw Data API, which is the new FastAPI backend for the HOT Export Tool.</p> <p>Since multiple projects need to do data extracts from OpenStreetMap in a flexible way, this was designed to have a single body of code to maintain.</p>"},{"location":"about/#installation","title":"Installation","text":"<p>To install osm-rawdata, you can use pip. Here are two options:</p> <ul> <li> <p>Directly from the main branch:   <code>pip install git+https://github.com/hotosm/osm-rawdata.git</code></p> </li> <li> <p>Latest on PyPi:   <code>pip install osm-rawdata</code></p> </li> </ul>"},{"location":"about/#the-database-schema","title":"The Database Schema","text":"<p>This project is heavily dependant on postgres and postgis. This schema was optimized for data anaylsis more than display purposes. The traditional schema use for OSM shows how it has evolved over the years. Some tags are columns (usually empty), and others get put into an jsonb tag column where they have to be accessed directly. One big change in this datbase schema is all the tags are in a single column, reducing the data size considerably, while also being easier to query in a consistent manner. In the past a developer had to keep track of what was a column, and what was in the tags column, which was inefficient.</p> <p>This schema has 4 tables, similar to the traditional ones. OSM data is imported using osm2pgsql but uses a lua script to create the custom schema. This module's usage is all read-only, as Underpass can keep the raw data updated every minute, and we just want to access that data.</p> <p>Things get more interesting as this module supports both a local database and a remote one. They use different query languages. To simplify this, a configuration file is used, which then generates the proper query syntax.</p>"},{"location":"about/#the-config-file","title":"The Config File","text":"<p>This reads in two different formats that describe the eventualy SQL query. The YAML format was originally used by Export Tool, but later abandoned for a JSON format. The YAML format was adopted by the osm-fieldwork project before this transistion happened, so uses an enhanced version to define the queries.</p> <p>The JSON format is also supported, both parsing the config file and also generating that query from a YAML config file.</p>"},{"location":"api/","title":"API Docs for osm-rawdata","text":""},{"location":"api/#configpy","title":"config.py","text":"<p>               Bases: <code>object</code></p> <p>Parse a config file into a data structure.</p> <p>Parameters:</p> Name Type Description Default <code>boundary</code> <code>Polygon</code> <p>The project boundary.</p> <code>None</code> Source code in <code>osm_rawdata/config.py</code> <pre><code>def __init__(self, boundary: Polygon = None):\n    \"\"\"Init the QueryConfig object.\n\n    Args:\n        boundary (Polygon): The project boundary.\n    \"\"\"\n    self.config = {\n        \"select\": {\n            \"nodes\": [],\n            \"ways_poly\": [],\n            \"ways_line\": [],\n            \"relations\": [],\n        },\n        \"tables\": [],\n        \"where\": {\n            \"nodes\": [],\n            \"ways_poly\": [],\n            \"ways_line\": [],\n            \"relations\": [],\n        },\n        \"keep\": [],\n    }\n    self.geometry = boundary\n    # for polygon extracts, sometimes we just want the center point\n    self.centroid = False\n</code></pre> <p>options: show_source: false heading_level: 3</p>"},{"location":"api/#osm_rawdata.config.QueryConfig.parseYaml","title":"parseYaml","text":"<pre><code>parseYaml(config)\n</code></pre> <p>Parse the YAML config file format into the internal data structure.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>(str, BytesIO)</code> <p>the file or BytesIO object to read.</p> required <p>Returns:</p> Name Type Description <code>config</code> <code>dict</code> <p>The config data.</p> Source code in <code>osm_rawdata/config.py</code> <pre><code>def parseYaml(self, config: Union[str, BytesIO]):  # noqa N802\n    \"\"\"Parse the YAML config file format into the internal data structure.\n\n    Args:\n        config (str, BytesIO): the file or BytesIO object to read.\n\n    Returns:\n        config (dict): The config data.\n    \"\"\"\n    yaml_data = self.load_yaml(config)\n\n    self._yaml_parse_tables(yaml_data)\n    self._yaml_parse_where(yaml_data)\n    self._yaml_parse_select_and_keep(yaml_data)\n    self.config[\"keep\"] = yaml_data.get(\"keep\", [])\n\n    return self.config\n</code></pre>"},{"location":"api/#osm_rawdata.config.QueryConfig.load_yaml","title":"load_yaml  <code>staticmethod</code>","text":"<pre><code>load_yaml(config)\n</code></pre> <p>Private method to load YAML data from a file.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>(str, BytesIO)</code> <p>The disk or memory file to read.</p> required <p>Returns:</p> Name Type Description <code>data</code> <code>dict</code> <p>The loaded YAML data.</p> Source code in <code>osm_rawdata/config.py</code> <pre><code>@staticmethod\ndef load_yaml(config: Union[str, BytesIO]):\n    \"\"\"Private method to load YAML data from a file.\n\n    Args:\n        config (str, BytesIO): The disk or memory file to read.\n\n    Returns:\n        data (dict): The loaded YAML data.\n    \"\"\"\n    if isinstance(config, str):\n        with open(config, \"r\") as file:\n            return yaml.safe_load(file)\n    elif isinstance(config, BytesIO):\n        return yaml.safe_load(config.getvalue())\n    else:\n        log.error(f\"Unsupported config format: {config}\")\n        raise ValueError(f\"Invalid config {config}\")\n</code></pre>"},{"location":"api/#osm_rawdata.config.QueryConfig.parseJson","title":"parseJson","text":"<pre><code>parseJson(config)\n</code></pre> <p>Parse the JSON format config file using the Underpass schema.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>(str, BytesIO)</code> <p>the file or BytesIO object to read.</p> required <p>Returns:</p> Name Type Description <code>config</code> <code>dict</code> <p>the config data</p> Source code in <code>osm_rawdata/config.py</code> <pre><code>def parseJson(self, config: Union[str, BytesIO]):  # noqa N802\n    \"\"\"Parse the JSON format config file using the Underpass schema.\n\n    Args:\n        config (str, BytesIO): the file or BytesIO object to read.\n\n    Returns:\n        config (dict): the config data\n    \"\"\"\n    # Check the type of config and load data accordingly\n    if isinstance(config, str):\n        with open(config, \"r\") as config_file:\n            data = json.load(config_file)\n    elif isinstance(config, BytesIO):\n        config.seek(0)  # Reset the file pointer to the beginning\n        data = json.load(config)\n    else:\n        log.error(f\"Unsupported config format: {config}\")\n        raise ValueError(f\"Invalid config {config}\")\n\n    # Helper function to convert geometry names\n    def convert_geometry(geom_type):\n        if geom_type == \"point\":\n            return \"nodes\"\n        elif geom_type == \"line\":\n            return \"ways_line\"\n        elif geom_type == \"polygon\":\n            return \"ways_poly\"\n        return geom_type\n\n    # Extract geometry\n    if geom_dict := data.get(\"geometry\"):\n        self.geometry = shape(geom_dict)\n\n    # Iterate through each key-value pair in the flattened dictionary\n    for key, value in flatdict.FlatDict(data).items():\n        keys = key.split(\":\")\n        # Skip the keys related to geometry\n        if key.startswith(\"geometry\"):\n            continue\n        # If it's a top-level key, directly update self.config\n        if len(keys) == 1:\n            self.config[key] = value\n            continue\n\n        # Extract meaningful parts from the key\n        section, subsection = keys[:2]\n        geom_type = keys[2] if len(keys) &gt; 2 else None\n        tag_type = keys[3] if len(keys) &gt; 3 else None\n        tag_name = keys[4] if len(keys) &gt; 4 else None\n\n        # Convert geometry type to meaningful names\n        geom_type = convert_geometry(geom_type)\n\n        if subsection == \"attributes\":\n            # For attributes, update select fields and tables\n            for attribute_name in value:\n                # FIXME needs a refactor to handle all_geometry correctly\n                if geom_type == \"all_geometry\":\n                    for geometry_type in [\"nodes\", \"ways_line\", \"ways_poly\"]:\n                        self.config[\"select\"][geometry_type].append(\n                            {attribute_name: {}}\n                        )\n                        self.config[\"tables\"].append(geometry_type)\n                else:\n                    self.config[\"select\"][geom_type].append({attribute_name: {}})\n                    self.config[\"tables\"].append(geom_type)\n        elif subsection == \"tags\":\n            # For tags, update where fields\n            option = tag_type[5:] if tag_type else None\n            new_tag = {tag_name: value, \"op\": option}\n            if geom_type == \"all_geometry\":\n                for geometry_type in [\"nodes\", \"ways_line\", \"ways_poly\"]:\n                    self.config[\"where\"][geometry_type].append(new_tag)\n            else:\n                self.config[\"where\"][geom_type].append(new_tag)\n\n    return self.config\n</code></pre>"},{"location":"api/#osm_rawdata.config.QueryConfig.getKeys","title":"getKeys","text":"<pre><code>getKeys()\n</code></pre> Source code in <code>osm_rawdata/config.py</code> <pre><code>def getKeys(self):\n    \"\"\" \"\"\"\n    keys = list()\n    # The first column returned is always the geometry\n    keys.append(\"geometry\")\n    for key, value in self.config[\"select\"].items():\n        if isinstance(value, list):\n            for v in value:\n                if isinstance(v, str):\n                    # print(f\"\\tSelecting table '{key}' has value '{v}'\")\n                    keys.append(v)\n                    continue\n                for k1, v1 in v.items():\n                    keys.append(k1)\n                    # print(f\"\\tSelecting table '{key}' tag '{k1}'\")\n        # else:\n        #     print(f\"\\tSelecting tag '{key}'\")\n    return keys\n</code></pre>"},{"location":"api/#osm_rawdata.config.QueryConfig.dump","title":"dump","text":"<pre><code>dump()\n</code></pre> <p>Dump the contents of the internal data strucute for debugging purposes.</p> Source code in <code>osm_rawdata/config.py</code> <pre><code>def dump(self):\n    \"\"\"Dump the contents of the internal data strucute for debugging purposes.\"\"\"\n    print(\"Dumping QueryConfig class\")\n\n    # These two data items are only used by Export Tool for output files\n    # for k, v in self.config.items():\n    #     if k == 'nodes' or k == 'ways_poly' or k == 'ways_line' or k == 'keep' or k == 'tables' k ==:\n    #         continue\n    #     print(f\"Other {k} is \\'{v}\\'\")\n\n    keys = list()\n    for key, value in self.config[\"select\"].items():\n        if isinstance(value, list):\n            for v in value:\n                if isinstance(v, str):\n                    print(f\"\\tSelecting table '{key}' has value '{v}'\")\n                    keys.append(v)\n                    continue\n                for k1, v1 in v.items():\n                    keys.append(v1)\n                    print(f\"\\tSelecting table '{key}' tag '{k1}'\")\n        else:\n            print(f\"\\tSelecting tag '{key}'\")\n    # print(f\"\\tSelecting tag \\'{key}\\' \\'{k1}\\' has values \\'{keys}\\'\")\n    print(\"Where: \")\n    for key, value in self.config[\"where\"].items():\n        if isinstance(value, list):\n            for v in value:\n                op = v[\"op\"].upper()\n                # del v['op']\n                if isinstance(v, str):\n                    print(f\"\\tWhere table '{key}' has value '{v}'\")\n                    keys.append(v)\n                    continue\n                for k1, v1 in v.items():\n                    keys.append(v1)\n                    if k1 == \"op\":\n                        continue\n                    print(\n                        f\"\\tWhere table '{key}', tag '{k1}' has values '{v1}' {op}\"\n                    )\n        else:\n            print(f\"\\tSelecting tag '{key}'\")\n    # print(\"Tables\")\n    # for table in self.config['tables']:\n    #    print(f\"\\t{table}\")\n    if self.geometry:\n        print(self.geometry)\n</code></pre>"},{"location":"api/#postgrespy","title":"postgres.py","text":"<p>               Bases: <code>object</code></p> <p>Parameters:</p> Name Type Description Default <code>dburi</code> <code>str</code> <p>The URI string for the database connection</p> required Source code in <code>osm_rawdata/postgres.py</code> <pre><code>def __init__(\n    self,\n    dburi: str,\n):\n    \"\"\"This is a class to setup a database connection.\n\n    Args:\n        dburi (str): The URI string for the database connection\n    \"\"\"\n    self.dbshell = None\n    self.dbcursor = None\n    self.uri = uriParser(dburi)\n    if self.uri[\"dbname\"] == \"underpass\":\n        # Use a persistant connect, better for multiple requests\n        self.session = requests.Session()\n        self.uri = os.getenv(\n            \"RAW_DATA_API_URL\", \"https://api-prod.raw-data.hotosm.org/v1\"\n        )\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"Content-Type\": \"application/json\",\n        }\n    else:\n        log.info(f\"Opening database connection to: {self.uri['dbname']}\")\n        connect = \"PG: dbname=\" + self.uri[\"dbname\"]\n        if \"dbname\" in self.uri and self.uri[\"dbname\"] is not None:\n            connect = f\"dbname={self.uri['dbname']}\"\n        elif (\n            \"dbhost\" in self.uri\n            and self.uri[\"dbhost\"] == \"localhost\"\n            and self.uri[\"dbhost\"] is not None\n        ):\n            connect = f\"host={self.uri['dbhost']} dbname={self.uri['dbname']}\"\n        if \"dbuser\" in self.uri and self.uri[\"dbuser\"] is not None:\n            connect += f\" user={self.uri['dbuser']}\"\n        if \"dbpass\" in self.uri and self.uri[\"dbpass\"] is not None:\n            connect += f\" password={self.uri['dbpass']}\"\n        # log.debug(f\"Connecting with: {connect}\")\n        try:\n            self.dbshell = psycopg2.connect(connect)\n            self.dbshell.autocommit = True\n            self.dbcursor = self.dbshell.cursor()\n            if self.dbcursor.closed != 0:\n                log.error(f\"Couldn't open cursor in {self.uri['dbname']}\")\n        except Exception as e:\n            log.error(f\"Couldn't connect to database: {e}\")\n</code></pre> <p>options: show_source: false heading_level: 3</p> <p>               Bases: <code>DatabaseAccess</code></p> <p>Class to handle SQL queries for the categories.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI string for the database connection.</p> required <code>config</code> <code>(str, BytesIO)</code> <p>The query config file path or BytesIO object. Currently only YAML format is accepted if BytesIO is passed.</p> <code>None</code> <p>Returns:</p> Type Description <code>bool</code> <p>Whether the data base connection was sucessful</p> Source code in <code>osm_rawdata/postgres.py</code> <pre><code>def __init__(\n    self,\n    uri: str,\n    config: Optional[Union[str, BytesIO]] = None,\n    auth_token: Optional[str] = None,\n    # output: str = None\n):\n    \"\"\"This is a client for a postgres database.\n\n    Args:\n        uri (str): The URI string for the database connection.\n        config (str, BytesIO): The query config file path or BytesIO object.\n            Currently only YAML format is accepted if BytesIO is passed.\n\n    Returns:\n        (bool): Whether the data base connection was sucessful\n    \"\"\"\n    super().__init__(uri)\n    self.qc = QueryConfig()\n\n    # Optional authentication\n    if auth_token:\n        self.headers[\"access-token\"] = auth_token\n\n    if config:\n        # filespec string passed\n        if isinstance(config, str):\n            path = Path(config)\n            if not path.exists():\n                raise FileNotFoundError(f\"Config file does not exist {config}\")\n            with open(config, \"rb\") as config_file:\n                config_data = BytesIO(config_file.read())\n            if path.suffix == \".json\":\n                config_type = \"json\"\n            elif path.suffix == \".yaml\":\n                config_type = \"yaml\"\n            else:\n                log.error(f\"Unsupported file format: {config}\")\n                raise ValueError(f\"Invalid config {config}\")\n\n        # BytesIO object passed\n        elif isinstance(config, BytesIO):\n            config.seek(0)  # Reset the file pointer to the beginning\n            config_data = config\n            try:\n                # Is JSON\n                json.load(config_data)\n                log.debug(\"Parsed config is JSON format\")\n                config_type = \"json\"\n            except json.JSONDecodeError as e:\n                log.error(e)\n                # Is YAML\n                log.debug(\"Parsed config is YAML format\")\n                config_type = \"yaml\"\n\n        else:\n            log.warning(f\"Config input is invalid for PostgresClient: {config}\")\n            raise ValueError(f\"Invalid config {config}\")\n\n        # Parse the config\n        if config_type == \"json\":\n            self.qc.parseJson(config_data)\n        elif config_type == \"yaml\":\n            self.qc.parseYaml(config_data)\n</code></pre> <p>options: show_source: false heading_level: 3</p> <p>               Bases: <code>object</code></p> Source code in <code>osm_rawdata/geofabrik.py</code> <pre><code>def __init__(self):\n    # find the path to the test data files\n    filespec = f\"{rootdir}/geofabrik.yaml\"\n    try:\n        file = open(filespec, \"rb\").read()\n    except Exception as e:\n        print(sys.argv)\n        log.error(f\"Couldn't open {filespec}: {e}\")\n        quit()\n    self.regions = yaml.load(file, Loader=yaml.Loader)\n</code></pre> <p>options: show_source: false heading_level: 3</p> <p>               Bases: <code>object</code></p> <p>Parse a config file into a data structure.</p> <p>Parameters:</p> Name Type Description Default <code>boundary</code> <code>Polygon</code> <p>The project boundary.</p> <code>None</code> Source code in <code>osm_rawdata/config.py</code> <pre><code>def __init__(self, boundary: Polygon = None):\n    \"\"\"Init the QueryConfig object.\n\n    Args:\n        boundary (Polygon): The project boundary.\n    \"\"\"\n    self.config = {\n        \"select\": {\n            \"nodes\": [],\n            \"ways_poly\": [],\n            \"ways_line\": [],\n            \"relations\": [],\n        },\n        \"tables\": [],\n        \"where\": {\n            \"nodes\": [],\n            \"ways_poly\": [],\n            \"ways_line\": [],\n            \"relations\": [],\n        },\n        \"keep\": [],\n    }\n    self.geometry = boundary\n    # for polygon extracts, sometimes we just want the center point\n    self.centroid = False\n</code></pre> <p>options: show_source: false heading_level: 3</p>"},{"location":"api/#osm_rawdata.postgres.DatabaseAccess.createJson","title":"createJson","text":"<pre><code>createJson(config, boundary, allgeom=False, extra_params={})\n</code></pre> <p>Generate a JSON file used for remote access to raw-data-api.</p> <p>Uses the Underpass schema.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>QueryConfig</code> <p>The config data from the query config file</p> required <code>boundary</code> <code>Polygon</code> <p>The boundary polygon</p> required <code>allgeom</code> <code>bool</code> <p>Whether to return centroids or all the full geometry TODO this is not implemented.</p> <code>False</code> <code>extra_params</code> <code>dict</code> <p>Extra parameters to include in JSON config root. These params override existing values if set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The stringified JSON data.</p> Source code in <code>osm_rawdata/postgres.py</code> <pre><code>def createJson(\n    self,\n    config: QueryConfig,\n    boundary: GeojsonPolygon,\n    allgeom: bool = False,\n    extra_params: dict = {},\n) -&gt; str:\n    \"\"\"Generate a JSON file used for remote access to raw-data-api.\n\n    Uses the Underpass schema.\n\n    Args:\n        config (QueryConfig): The config data from the query config file\n        boundary (GeojsonPolygon): The boundary polygon\n        allgeom (bool): Whether to return centroids or all the full geometry\n            TODO this is not implemented.\n        extra_params (dict): Extra parameters to include in JSON config root.\n            These params override existing values if set.\n\n    Returns:\n        str: The stringified JSON data.\n    \"\"\"\n    json_data = {\n        \"geometry\": boundary,\n        \"geometryType\": self._get_geometry_types(config),\n        \"filters\": self._get_filters(config),\n        \"centroid\": config.config.get(\"centroid\", False),\n        \"attributes\": self._get_attributes(config),\n        **extra_params,\n    }\n\n    return json.dumps(json_data)\n</code></pre>"},{"location":"api/#osm_rawdata.postgres.DatabaseAccess.createSQL","title":"createSQL","text":"<pre><code>createSQL(config, allgeom=True)\n</code></pre> <p>This class generates the SQL to query a local postgres database.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>QueryConfig</code> <p>The config data from the query config file</p> required <code>allgeom</code> <code>bool</code> <p>Whether to return centroids or all the full geometry</p> <code>True</code> <p>Returns:</p> Type Description <code>FeatureCollection</code> <p>the json</p> Source code in <code>osm_rawdata/postgres.py</code> <pre><code>def createSQL(\n    self,\n    config: QueryConfig,\n    allgeom: bool = True,\n):\n    \"\"\"This class generates the SQL to query a local postgres database.\n\n    Args:\n        config (QueryConfig): The config data from the query config file\n        allgeom (bool): Whether to return centroids or all the full geometry\n\n    Returns:\n        (FeatureCollection): the json\n    \"\"\"\n    sql = list()\n    query = \"\"\n    for table in config.config[\"tables\"]:\n        select = \"SELECT \"\n        if allgeom:\n            select += \"ST_AsText(geom) AS geometry\"\n        else:\n            select += \"ST_AsText(ST_Centroid(geom)) AS geometry\"\n        select += \", osm_id, version, \"\n        for entry in config.config[\"select\"][table]:\n            for k1, v1 in entry.items():\n                if k1 == \"osm_id\" or k1 == \"version\":\n                    continue\n                select += f\"tags-&gt;&gt;'{k1}', \"\n        select = select[:-2]\n\n        # If a way, we need the refs for conflating with JOSM\n        if table == \"ways_poly\":\n            select += \", refs \"\n\n        join_or = list()\n        join_and = list()\n        for entry in config.config[\"where\"][table]:\n            # print(entry)\n            if \"op\" not in entry:\n                pass\n            op = entry[\"op\"]\n            for k, v in entry.items():\n                if k == \"op\":\n                    continue\n                if op == \"or\":\n                    # print(f\"1: {k}=\\'{v}\\' OR \")\n                    join_or.append(entry)\n                elif op == \"and\":\n                    # print(f\"2: {k}=\\'{v}\\' AND \")\n                    join_and.append(entry)\n        # jor = '('\n        jor = \"\"\n        for entry in join_or:\n            for k, v in entry.items():\n                # Check if v is a non-empty list\n                if isinstance(v, list) and v:\n                    if isinstance(v[0], list):\n                        # It's an array of values\n                        value = str(v[0])\n                        any = f\"ANY(ARRAY{value})\"\n                        jor += f\"tags-&gt;&gt;'{k}'={any} OR \"\n                        continue\n                if k == \"op\":\n                    continue\n                if len(v) == 1:\n                    if v[0] == \"not null\":\n                        v1 = \"IS NOT NULL\"\n                    else:\n                        v1 = f\"='{v[0]}'\"\n                elif len(v) &gt; 0:\n                    v1 = f\" IN {str(tuple(v))}\"\n                else:\n                    v1 = \"IS NOT NULL\"\n                jor += f\"tags-&gt;&gt;'{k}' {v1} OR \"\n        # print(f\"JOR: {jor}\")\n\n        jand = \"\"\n        for entry in join_and:\n            for k, v in entry.items():\n                if k == \"op\":\n                    continue\n                if len(v) == 1:\n                    if v[0] == \"not null\":\n                        v1 = \"IS NOT NULL\"\n                    else:\n                        v1 = f\"='{v[0]}'\"\n                elif len(v) &gt; 0:\n                    v1 = f\" IN {str(tuple(v))}\"\n                else:\n                    v1 = \"IS NOT NULL AND\"\n                jand += f\"tags-&gt;&gt;'{k}' {v1} AND \"\n        # print(f\"JAND: {jand}\")\n        query = f\"{select} FROM {table} WHERE {jor} {jand}\".rstrip()\n        # if query[len(query)-5:] == ' OR  ':\n        # print(query[:query.rfind(' ')])\n        sql.append(query[: query.rfind(\" \")])\n\n    return sql\n</code></pre>"},{"location":"api/#osm_rawdata.postgres.DatabaseAccess.createTable","title":"createTable","text":"<pre><code>createTable(sql)\n</code></pre> <p>Create a table in the database</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL</p> required <p>Returns:</p> Type Description <code>bool</code> <p>The table creation status</p> Source code in <code>osm_rawdata/postgres.py</code> <pre><code>def createTable(\n    self,\n    sql: str,\n):\n    \"\"\"Create a table in the database\n\n    Args:\n        sql (str): The SQL\n\n    Returns:\n        (bool): The table creation status\n    \"\"\"\n    log.info(\"Creating table schema\")\n    result = self.dbcursor.execute(sql)\n\n    return True\n</code></pre>"},{"location":"api/#osm_rawdata.postgres.DatabaseAccess.execute","title":"execute","text":"<pre><code>execute(sql)\n</code></pre> <p>Execute a raw SQL query and return the results.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL to execute</p> required <p>Returns:</p> Type Description <code>list</code> <p>The results of the query</p> Source code in <code>osm_rawdata/postgres.py</code> <pre><code>def execute(\n    self,\n    sql: str,\n):\n    \"\"\"Execute a raw SQL query and return the results.\n\n    Args:\n        sql (str): The SQL to execute\n\n    Returns:\n        (list): The results of the query\n    \"\"\"\n    # print(sql)\n    try:\n        result = self.dbcursor.execute(sql)\n        return self.dbcursor.fetchall()\n    except:\n        log.error(f\"Couldn't execute query! {sql}\")\n        return list()\n</code></pre>"},{"location":"api/#osm_rawdata.postgres.DatabaseAccess.queryLocal","title":"queryLocal","text":"<pre><code>queryLocal(query, allgeom=True, boundary=None)\n</code></pre> <p>This query a local postgres database.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The SQL query to execute</p> required <code>allgeom</code> <code>bool</code> <p>Whether to return centroids or all the full geometry</p> <code>True</code> <code>boundary</code> <code>Polygon</code> <p>The boundary polygon</p> <code>None</code> <p>Returns:</p> Name Type Description <code>query</code> <code>FeatureCollection</code> <p>the results of the query</p> Source code in <code>osm_rawdata/postgres.py</code> <pre><code>def queryLocal(\n    self,\n    query: str,\n    allgeom: bool = True,\n    boundary: Polygon = None,\n):\n    \"\"\"This query a local postgres database.\n\n    Args:\n        query (str): The SQL query to execute\n        allgeom (bool): Whether to return centroids or all the full geometry\n        boundary (Polygon): The boundary polygon\n\n    Returns:\n            query (FeatureCollection): the results of the query\n    \"\"\"\n    features = list()\n    # if no boundary, it's already been setup\n    if boundary:\n        sql = f\"DROP VIEW IF EXISTS ways_view;CREATE VIEW ways_view AS SELECT * FROM ways_poly WHERE ST_CONTAINS(ST_GeomFromEWKT('SRID=4326;{boundary.wkt}'), geom)\"\n        self.dbcursor.execute(sql)\n        sql = f\"DROP VIEW IF EXISTS nodes_view;CREATE VIEW nodes_view AS SELECT * FROM nodes WHERE ST_CONTAINS(ST_GeomFromEWKT('SRID=4326;{boundary.wkt}'), geom)\"\n        self.dbcursor.execute(sql)\n        sql = f\"DROP VIEW IF EXISTS lines_view;CREATE VIEW lines_view AS SELECT * FROM ways_line WHERE ST_CONTAINS(ST_GeomFromEWKT('SRID=4326;{boundary.wkt}'), geom)\"\n        self.dbcursor.execute(sql)\n        sql = f\"DROP VIEW IF EXISTS relations_view;CREATE TEMP VIEW relations_view AS SELECT * FROM nodes WHERE ST_CONTAINS(ST_GeomFromEWKT('SRID=4326;{boundary.wkt}'), geom)\"\n        self.dbcursor.execute(sql)\n\n        if query.find(\" ways_poly \") &gt; 0:\n            query = query.replace(\"ways_poly\", \"ways_view\")\n        elif query.find(\" ways_line \") &gt; 0:\n            query = query.replace(\"ways_line\", \"lines_view\")\n        elif query.find(\" nodes \") &gt; 0:\n            query = query.replace(\"nodes\", \"nodes_view\")\n        elif query.find(\" relations \") &gt; 0:\n            query = query.replace(\"relations\", \"relations_view\")\n\n    # log.debug(query)\n    self.dbcursor.execute(query)\n    try:\n        result = self.dbcursor.fetchall()\n        # log.debug(\"SQL Query returned %d records\" % len(result))\n    except:\n        return FeatureCollection(features)\n\n    # If there is no config file, don't modify the results\n    if (\n        len(self.qc.config[\"where\"][\"ways_poly\"]) == 0\n        and len(self.qc.config[\"where\"][\"nodes\"]) == 0\n    ):\n        return result\n\n    for item in result:\n        if len(item) &lt;= 1 and len(result) == 1:\n            return result\n            # break\n        # print(f\"{item}\")\n        tags = dict()\n        geom = wkt.loads(item[0])\n        # tags[\"id\"] = item[1]\n        tags[\"version\"] = item[2]\n        if query.find(\" refs \") &gt; 0:\n            tags[\"refs\"] = str(item[len(item) - 1])\n            # breakpoint()\n        i = 3\n        # Figure out the tags from the SELECT part of the query\n        keys = query.replace(\",\", \"\").replace(\"tags-&gt;&gt;\", \"\").replace(\"'\", \"\")\n        end = keys.find(\"FROM\")\n        res = keys[:end].split(\" \")\n        # This should be the geometry\n        geom = wkt.loads(item[0])\n        for i in range(2, len(item)):\n            # print(f\"{res[i]} = {item[i - 1]}\")\n            if item[i - 1] is None:\n                continue\n            tags[res[i]] = item[i - 1]\n        features.append(Feature(geometry=geom, properties=tags))\n    return FeatureCollection(features)\n</code></pre>"},{"location":"api/#osm_rawdata.postgres.DatabaseAccess.queryRemote","title":"queryRemote","text":"<pre><code>queryRemote(query)\n</code></pre> <p>This queries a remote postgres database using the FastAPI backend to the HOT Export Tool.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The JSON query to execute.</p> required <p>Returns:</p> Type Description <code>(str, FeatureCollection, BytesIO)</code> <p>either the data URL if bind_zip=False, extracted geojson, else BytesIO file. Returns None on failure.</p> Source code in <code>osm_rawdata/postgres.py</code> <pre><code>def queryRemote(\n    self,\n    query: str,\n) -&gt; Optional[Union[str, dict, BytesIO]]:\n    \"\"\"This queries a remote postgres database using the FastAPI\n    backend to the HOT Export Tool.\n\n    Args:\n        query (str): The JSON query to execute.\n\n    Returns:\n        (str, FeatureCollection, BytesIO): either the data URL if bind_zip=False,\n            extracted geojson, else BytesIO file. Returns None on failure.\n    \"\"\"\n    # Send the request to raw data api\n    result = None\n\n    url = f\"{self.uri}/snapshot/\"\n    try:\n        log.debug(f\"Raw Data API snapshot JSON config: {query}\")\n        result = self.session.post(url, data=query, headers=self.headers)\n        result.raise_for_status()\n    except requests.exceptions.HTTPError:\n        if result is not None:\n            error_dict = result.json()\n            error_dict[\"status_code\"] = result.status_code\n            log.error(f\"Failed to get extract from Raw Data API: {error_dict}\")\n            return None\n        else:\n            log.error(\"Failed to make request to raw data API\")\n\n    if result is None:\n        log.error(\"Raw Data API did not return a response. Skipping.\")\n        return None\n\n    if result.status_code != 200:\n        error_message = result.json().get(\"detail\")[0].get(\"msg\")\n        log.error(f\"{error_message}\")\n        return None\n\n    task_id = result.json().get(\"task_id\")\n    task_query_url = f\"{self.uri}/tasks/status/{task_id}\"\n    log.debug(f\"Raw Data API Query URL: {task_query_url}\")\n\n    polling_interval = 2  # Initial polling interval in seconds\n    max_polling_duration = (\n        600  # Maximum duration for polling in seconds (10 minutes)\n    )\n    elapsed_time = 0\n\n    while elapsed_time &lt; max_polling_duration:\n        response = self.session.get(task_query_url, headers=self.headers)\n        response_json = response.json()\n        response_status = response_json.get(\"status\")\n        task_info = response_json.get(\"result\", {})\n\n        log.debug(f\"Current status: {response_status}\")\n\n        # First check to see if FAILURE and stop polling\n        if response_status == \"FAILURE\":\n            # NOTE bug we must override task_info as it's set to a string\n            task_info = {}\n            log.error(f\"Raw-data-api task FAILURE. Details: {task_query_url}\")\n            break\n\n        # response_status options: STARTED, PENDING, SUCCESS\n        if (\n            response_status != \"SUCCESS\"\n            or not isinstance(task_info, dict)\n            or not task_info.get(\"download_url\")\n        ):\n            # Adjust polling frequency after the first minute\n            if elapsed_time &gt; 60:\n                polling_interval = (\n                    10  # Poll every 10 seconds after the first minute\n                )\n\n            # Wait before polling again\n            log.debug(\n                f\"Waiting {polling_interval} seconds before polling API again...\"\n            )\n            time.sleep(polling_interval)\n            elapsed_time += polling_interval\n\n        else:\n            # response_status=\"SUCCESS\" and download_url present\n            break\n\n    else:\n        # Maximum polling duration reached\n        log.error(f\"{max_polling_duration} second elapsed. Aborting data extract.\")\n        return None\n\n    log.debug(f\"Raw Data API Response: {task_info}\")\n    data_url = task_info.get(\"download_url\")\n\n    if not data_url:\n        log.error(\"Raw data api no download_url returned. Skipping.\")\n        return None\n\n    if not data_url.endswith(\".zip\"):\n        return data_url\n\n    # Extract filename is set, else use RawExport.geojson\n    query_dict = json.loads(query)\n    file_type = query_dict.get(\"outputType\", \"geojson\")\n    filename = f\"{query_dict.get('fileName', 'RawExport')}.{file_type}\"\n    # Get zip file and extract\n    with self.session.get(data_url, headers=self.headers) as response:\n        buffer = BytesIO(response.content)\n        with zipfile.ZipFile(buffer, \"r\") as zipped_file:\n            with zipped_file.open(filename) as extracted_data:\n                if file_type == \"geojson\":\n                    return json.load(extracted_data)\n                else:\n                    return BytesIO(extracted_data.read())\n</code></pre>"},{"location":"api/#osm_rawdata.postgres.PostgresClient.createDB","title":"createDB","text":"<pre><code>createDB(dburi)\n</code></pre> <p>Setup the postgres database connection.</p> <p>Parameters:</p> Name Type Description Default <code>dburi</code> <code>str</code> <p>The URI string for the database connection</p> required <p>Returns:</p> Name Type Description <code>status</code> <code>bool</code> <p>Whether the data base connection was sucessful</p> Source code in <code>osm_rawdata/postgres.py</code> <pre><code>def createDB(self, dburi: uriParser):\n    \"\"\"Setup the postgres database connection.\n\n    Args:\n        dburi (str): The URI string for the database connection\n\n    Returns:\n        status (bool): Whether the data base connection was sucessful\n    \"\"\"\n    sql = f\"CREATE DATABASE IF NOT EXISTS {self.dbname}\"\n    self.dbcursor.execute(sql)\n    result = self.dbcursor.fetchall()\n    log.info(\"Query returned %d records\" % len(result))\n    # result = subprocess.call(\"createdb\", uri.dbname)\n\n    # Add the extensions needed\n    sql = \"CREATE EXTENSION postgis; CREATE EXTENSION hstore;\"\n    self.dbcursor.execute(sql)\n    result = self.dbcursor.fetchall()\n    log.info(\"Query returned %d records\" % len(result))\n    return True\n</code></pre>"},{"location":"api/#osm_rawdata.postgres.PostgresClient.execQuery","title":"execQuery","text":"<pre><code>execQuery(boundary, customsql=None, allgeom=True, extra_params={})\n</code></pre> <p>This class generates executes the query using a local postgres database, or a remote one that uses the Underpass schema.</p> <p>Parameters:</p> Name Type Description Default <code>boundary</code> <code>(FeatureCollection, Feature, dict, str)</code> <p>The boundary polygon.</p> required <code>customsql</code> <code>str</code> <p>Don't create the SQL, use the one supplied.</p> <code>None</code> <code>allgeom</code> <code>bool</code> <p>Whether to return centroids or all the full geometry.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>query</code> <code>FeatureCollection</code> <p>the json</p> Source code in <code>osm_rawdata/postgres.py</code> <pre><code>def execQuery(\n    self,\n    boundary: Union[FeatureCollection, Feature, dict, str],\n    customsql: str = None,\n    allgeom: bool = True,\n    extra_params: dict = {},\n):\n    \"\"\"This class generates executes the query using a local postgres\n    database, or a remote one that uses the Underpass schema.\n\n    Args:\n        boundary (FeatureCollection, Feature, dict, str): The boundary polygon.\n        customsql (str): Don't create the SQL, use the one supplied.\n        allgeom (bool): Whether to return centroids or all the full geometry.\n\n    Returns:\n            query (FeatureCollection): the json\n    \"\"\"\n    log.info(\"Parsing AOI geojson for data extract\")\n\n    # Parse JSON string type\n    if isinstance(boundary, str):\n        boundary = json.loads(boundary)\n\n    # If multiple geoms are passed, unary_union them\n    if (geom_type := boundary.get(\"type\")) == \"FeatureCollection\":\n        # Convert each feature into a Shapely geometry\n        geometries = [\n            shape(feature.get(\"geometry\"))\n            for feature in boundary.get(\"features\", [])\n        ]\n        merged_geom = (\n            unary_union(geometries) if len(geometries) &gt; 1 else geometries[0]\n        )\n    elif geom_type == \"Feature\":\n        merged_geom = shape(boundary.get(\"geometry\"))\n    else:\n        merged_geom = shape(boundary)\n\n    if self.dbshell:\n        # If a multipolygon is passed, attempt a merge\n        if isinstance(merged_geom, MultiPolygon):\n            aoi_shape = MultiPolygon(\n                [Polygon(poly.exterior) for poly in merged_geom.geoms]\n            )\n        elif isinstance(merged_geom, Polygon):\n            aoi_shape = Polygon(merged_geom.exterior)\n\n        log.info(\"Extracting features from Postgres...\")\n        if not customsql:\n            sql = self.createSQL(self.qc, allgeom)\n        else:\n            sql = [customsql]\n        alldata = list()\n        for query in sql:\n            # print(query)\n            result = self.queryLocal(query, allgeom, aoi_shape)\n            if len(result) &gt; 0:\n                alldata += result[\"features\"]\n        collection = FeatureCollection(alldata)\n    else:\n        log.info(\"Extracting features via remote call...\")\n        json_config = self.createJson(\n            self.qc, mapping(merged_geom), allgeom, extra_params\n        )\n        collection = self.queryRemote(json_config)\n        # bind_zip=False, data is not zipped, return URL directly\n        if not json.loads(json_config).get(\"bind_zip\", True):\n            return collection\n\n    if not collection:\n        log.warning(\"No data returned for data extract\")\n\n    return collection\n</code></pre>"},{"location":"api/#osm_rawdata.config.QueryConfig.parseYaml","title":"parseYaml","text":"<pre><code>parseYaml(config)\n</code></pre> <p>Parse the YAML config file format into the internal data structure.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>(str, BytesIO)</code> <p>the file or BytesIO object to read.</p> required <p>Returns:</p> Name Type Description <code>config</code> <code>dict</code> <p>The config data.</p> Source code in <code>osm_rawdata/config.py</code> <pre><code>def parseYaml(self, config: Union[str, BytesIO]):  # noqa N802\n    \"\"\"Parse the YAML config file format into the internal data structure.\n\n    Args:\n        config (str, BytesIO): the file or BytesIO object to read.\n\n    Returns:\n        config (dict): The config data.\n    \"\"\"\n    yaml_data = self.load_yaml(config)\n\n    self._yaml_parse_tables(yaml_data)\n    self._yaml_parse_where(yaml_data)\n    self._yaml_parse_select_and_keep(yaml_data)\n    self.config[\"keep\"] = yaml_data.get(\"keep\", [])\n\n    return self.config\n</code></pre>"},{"location":"api/#osm_rawdata.config.QueryConfig.load_yaml","title":"load_yaml  <code>staticmethod</code>","text":"<pre><code>load_yaml(config)\n</code></pre> <p>Private method to load YAML data from a file.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>(str, BytesIO)</code> <p>The disk or memory file to read.</p> required <p>Returns:</p> Name Type Description <code>data</code> <code>dict</code> <p>The loaded YAML data.</p> Source code in <code>osm_rawdata/config.py</code> <pre><code>@staticmethod\ndef load_yaml(config: Union[str, BytesIO]):\n    \"\"\"Private method to load YAML data from a file.\n\n    Args:\n        config (str, BytesIO): The disk or memory file to read.\n\n    Returns:\n        data (dict): The loaded YAML data.\n    \"\"\"\n    if isinstance(config, str):\n        with open(config, \"r\") as file:\n            return yaml.safe_load(file)\n    elif isinstance(config, BytesIO):\n        return yaml.safe_load(config.getvalue())\n    else:\n        log.error(f\"Unsupported config format: {config}\")\n        raise ValueError(f\"Invalid config {config}\")\n</code></pre>"},{"location":"api/#osm_rawdata.config.QueryConfig.parseJson","title":"parseJson","text":"<pre><code>parseJson(config)\n</code></pre> <p>Parse the JSON format config file using the Underpass schema.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>(str, BytesIO)</code> <p>the file or BytesIO object to read.</p> required <p>Returns:</p> Name Type Description <code>config</code> <code>dict</code> <p>the config data</p> Source code in <code>osm_rawdata/config.py</code> <pre><code>def parseJson(self, config: Union[str, BytesIO]):  # noqa N802\n    \"\"\"Parse the JSON format config file using the Underpass schema.\n\n    Args:\n        config (str, BytesIO): the file or BytesIO object to read.\n\n    Returns:\n        config (dict): the config data\n    \"\"\"\n    # Check the type of config and load data accordingly\n    if isinstance(config, str):\n        with open(config, \"r\") as config_file:\n            data = json.load(config_file)\n    elif isinstance(config, BytesIO):\n        config.seek(0)  # Reset the file pointer to the beginning\n        data = json.load(config)\n    else:\n        log.error(f\"Unsupported config format: {config}\")\n        raise ValueError(f\"Invalid config {config}\")\n\n    # Helper function to convert geometry names\n    def convert_geometry(geom_type):\n        if geom_type == \"point\":\n            return \"nodes\"\n        elif geom_type == \"line\":\n            return \"ways_line\"\n        elif geom_type == \"polygon\":\n            return \"ways_poly\"\n        return geom_type\n\n    # Extract geometry\n    if geom_dict := data.get(\"geometry\"):\n        self.geometry = shape(geom_dict)\n\n    # Iterate through each key-value pair in the flattened dictionary\n    for key, value in flatdict.FlatDict(data).items():\n        keys = key.split(\":\")\n        # Skip the keys related to geometry\n        if key.startswith(\"geometry\"):\n            continue\n        # If it's a top-level key, directly update self.config\n        if len(keys) == 1:\n            self.config[key] = value\n            continue\n\n        # Extract meaningful parts from the key\n        section, subsection = keys[:2]\n        geom_type = keys[2] if len(keys) &gt; 2 else None\n        tag_type = keys[3] if len(keys) &gt; 3 else None\n        tag_name = keys[4] if len(keys) &gt; 4 else None\n\n        # Convert geometry type to meaningful names\n        geom_type = convert_geometry(geom_type)\n\n        if subsection == \"attributes\":\n            # For attributes, update select fields and tables\n            for attribute_name in value:\n                # FIXME needs a refactor to handle all_geometry correctly\n                if geom_type == \"all_geometry\":\n                    for geometry_type in [\"nodes\", \"ways_line\", \"ways_poly\"]:\n                        self.config[\"select\"][geometry_type].append(\n                            {attribute_name: {}}\n                        )\n                        self.config[\"tables\"].append(geometry_type)\n                else:\n                    self.config[\"select\"][geom_type].append({attribute_name: {}})\n                    self.config[\"tables\"].append(geom_type)\n        elif subsection == \"tags\":\n            # For tags, update where fields\n            option = tag_type[5:] if tag_type else None\n            new_tag = {tag_name: value, \"op\": option}\n            if geom_type == \"all_geometry\":\n                for geometry_type in [\"nodes\", \"ways_line\", \"ways_poly\"]:\n                    self.config[\"where\"][geometry_type].append(new_tag)\n            else:\n                self.config[\"where\"][geom_type].append(new_tag)\n\n    return self.config\n</code></pre>"},{"location":"api/#osm_rawdata.config.QueryConfig.getKeys","title":"getKeys","text":"<pre><code>getKeys()\n</code></pre> Source code in <code>osm_rawdata/config.py</code> <pre><code>def getKeys(self):\n    \"\"\" \"\"\"\n    keys = list()\n    # The first column returned is always the geometry\n    keys.append(\"geometry\")\n    for key, value in self.config[\"select\"].items():\n        if isinstance(value, list):\n            for v in value:\n                if isinstance(v, str):\n                    # print(f\"\\tSelecting table '{key}' has value '{v}'\")\n                    keys.append(v)\n                    continue\n                for k1, v1 in v.items():\n                    keys.append(k1)\n                    # print(f\"\\tSelecting table '{key}' tag '{k1}'\")\n        # else:\n        #     print(f\"\\tSelecting tag '{key}'\")\n    return keys\n</code></pre>"},{"location":"api/#osm_rawdata.config.QueryConfig.dump","title":"dump","text":"<pre><code>dump()\n</code></pre> <p>Dump the contents of the internal data strucute for debugging purposes.</p> Source code in <code>osm_rawdata/config.py</code> <pre><code>def dump(self):\n    \"\"\"Dump the contents of the internal data strucute for debugging purposes.\"\"\"\n    print(\"Dumping QueryConfig class\")\n\n    # These two data items are only used by Export Tool for output files\n    # for k, v in self.config.items():\n    #     if k == 'nodes' or k == 'ways_poly' or k == 'ways_line' or k == 'keep' or k == 'tables' k ==:\n    #         continue\n    #     print(f\"Other {k} is \\'{v}\\'\")\n\n    keys = list()\n    for key, value in self.config[\"select\"].items():\n        if isinstance(value, list):\n            for v in value:\n                if isinstance(v, str):\n                    print(f\"\\tSelecting table '{key}' has value '{v}'\")\n                    keys.append(v)\n                    continue\n                for k1, v1 in v.items():\n                    keys.append(v1)\n                    print(f\"\\tSelecting table '{key}' tag '{k1}'\")\n        else:\n            print(f\"\\tSelecting tag '{key}'\")\n    # print(f\"\\tSelecting tag \\'{key}\\' \\'{k1}\\' has values \\'{keys}\\'\")\n    print(\"Where: \")\n    for key, value in self.config[\"where\"].items():\n        if isinstance(value, list):\n            for v in value:\n                op = v[\"op\"].upper()\n                # del v['op']\n                if isinstance(v, str):\n                    print(f\"\\tWhere table '{key}' has value '{v}'\")\n                    keys.append(v)\n                    continue\n                for k1, v1 in v.items():\n                    keys.append(v1)\n                    if k1 == \"op\":\n                        continue\n                    print(\n                        f\"\\tWhere table '{key}', tag '{k1}' has values '{v1}' {op}\"\n                    )\n        else:\n            print(f\"\\tSelecting tag '{key}'\")\n    # print(\"Tables\")\n    # for table in self.config['tables']:\n    #    print(f\"\\t{table}\")\n    if self.geometry:\n        print(self.geometry)\n</code></pre>"},{"location":"api/#importerpy","title":"importer.py","text":"<p>               Bases: <code>object</code></p> <p>Parameters:</p> Name Type Description Default <code>dburi</code> <code>str</code> <p>The URI string for the database connection</p> required <p>Returns:</p> Type Description <code>OsmImporter</code> <p>An instance of this class</p> Source code in <code>osm_rawdata/importer.py</code> <pre><code>def __init__(\n    self,\n    dburi: str,\n):\n    \"\"\"This is a class to setup a local database for OSM data.\n\n    Args:\n        dburi (str): The URI string for the database connection\n\n    Returns:\n        (OsmImporter): An instance of this class\n    \"\"\"\n    self.dburi = dburi\n    self.db = None\n    self.connections = list()\n    for thread in range(0, cores + 1):\n        engine = create_engine(f\"postgresql://{self.dburi}\", echo=False)\n        if not database_exists(engine.url):\n            create_database(engine.url)\n        self.connections.append(engine.connect())\n        sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n        if thread == 0:\n            meta = MetaData()\n            meta.create_all(engine)\n\n            # if dburi:\n            # self.uri = uriParser(dburi)\n            # engine = create_engine(f\"postgresql://{self.dburi}\", echo=True)\n            # if not database_exists(engine.url):\n            #     create_database(engine.url)\n            # self.db = engine.connect()\n\n            # Add the extension we need to process the data\n            sql = text(\n                \"CREATE EXTENSION IF NOT EXISTS postgis; CREATE EXTENSION IF NOT EXISTS hstore;CREATE EXTENSION IF NOT EXISTS dblink;\"\n            )\n            self.connections[0].execute(sql)\n\n            Base.metadata.create_all(bind=engine)\n\n            sessionmaker(autocommit=False, autoflush=False, bind=engine)\n</code></pre> <p>options: show_source: false heading_level: 3</p>"},{"location":"api/#osm_rawdata.importer.MapImporter.importOSM","title":"importOSM","text":"<pre><code>importOSM(infile)\n</code></pre> <p>Import an OSM data file into a postgres database.</p> <p>Parameters:</p> Name Type Description Default <code>infile</code> <code>str</code> <p>The file to import</p> required <p>Returns:     (bool): Whether the import finished sucessfully</p> Source code in <code>osm_rawdata/importer.py</code> <pre><code>def importOSM(\n    self,\n    infile: str,\n):\n    \"\"\"Import an OSM data file into a postgres database.\n\n    Args:\n        infile (str): The file to import\n    Returns:\n        (bool): Whether the import finished sucessfully\n    \"\"\"\n    # osm2pgsql --create -d nigeria --extra-attributes --output=flex --style raw.lua nigeria-latest-internal.osm.pbf\n    uri = uriParser(self.dburi)\n    result = subprocess.run(\n        [\n            \"osm2pgsql\",\n            \"--create\",\n            \"-d\",\n            f\"{uri['dbname']}\",\n            \"--extra-attributes\",\n            \"--output=flex\",\n            \"--style\",\n            f\"{rootdir}/import/raw.lua\",\n            f\"{infile}\",\n        ]\n    )\n    result.check_returncode()\n</code></pre>"},{"location":"api/#osm_rawdata.importer.MapImporter.importParquet","title":"importParquet","text":"<pre><code>importParquet(infile)\n</code></pre> <p>Import an Overture parquet data file into a postgres database.</p> <p>Parameters:</p> Name Type Description Default <code>infile</code> <code>str</code> <p>The file to import</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Whether the import finished sucessfully</p> Source code in <code>osm_rawdata/importer.py</code> <pre><code>def importParquet(\n    self,\n    infile: str,\n):\n    \"\"\"Import an Overture parquet data file into a postgres database.\n\n    Args:\n        infile (str): The file to import\n\n    Returns:\n        (bool): Whether the import finished sucessfully\n    \"\"\"\n    # spin = PixelSpinner(f\"Processing {infile}...\")\n    timer = Timer(text=\"importParquet() took {seconds:.0f}s\")\n    timer.start()\n    overture = Overture(infile)\n\n    connections = list()\n    for thread in range(0, cores + 1):\n        engine = create_engine(f\"postgresql://{self.dburi}\", echo=False)\n        if not database_exists(engine.url):\n            create_database(engine.url)\n        connections.append(engine.connect())\n        sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n        if thread == 0:\n            meta = MetaData()\n            meta.create_all(engine)\n\n    # A chunk is a group of threads\n    entries = len(overture.data)\n    log.debug(f\"There are {entries} entries in {infile}\")\n    chunk = round(entries / cores)\n\n    if entries &lt;= chunk:\n        result = parquetThread(overture.data, connections[0])\n        timer.stop()\n        return True\n\n    index = 0\n    with concurrent.futures.ProcessPoolExecutor(max_workers=cores) as executor:\n        block = 0\n        while block &lt;= entries:\n            if len(overture.data[block : block + chunk]) == 0:\n                continue\n            log.debug(\"Dispatching Block %d:%d\" % (block, block + chunk))\n            result = executor.submit(\n                parquetThread,\n                overture.data[block : block + chunk],\n                connections[index],\n            )\n            block += chunk\n            index += 1\n        executor.shutdown()\n    timer.stop()\n</code></pre>"},{"location":"api/#osm_rawdata.importer.MapImporter.importGeoJson","title":"importGeoJson","text":"<pre><code>importGeoJson(infile)\n</code></pre> <p>Import a GeoJson data file into a postgres database.</p> <p>Parameters:</p> Name Type Description Default <code>infile</code> <code>str</code> <p>The file to import</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Whether the import finished sucessfully</p> Source code in <code>osm_rawdata/importer.py</code> <pre><code>def importGeoJson(\n    self,\n    infile: str,\n):\n    \"\"\"Import a GeoJson data file into a postgres database.\n\n    Args:\n        infile (str): The file to import\n\n    Returns:\n        (bool): Whether the import finished sucessfully\n    \"\"\"\n    # load the GeoJson file\n    file = open(infile, \"r\")\n    # size = os.path.getsize(infile)\n    # for line in file.readlines():\n    #    print(line)\n    data = geojson.load(file)\n\n    future = None\n    result = None\n    index = 0\n    connections = list()\n\n    timer = Timer(text=\"importGeoJson() took {seconds:.0f}s\")\n    timer.start()\n\n    # A chunk is a group of threads\n    entries = len(data[\"features\"])\n    chunk = round(entries / cores)\n\n    # For small files we only need one thread\n    if entries &lt;= chunk:\n        result = importThread(data[\"features\"], self.connections[0])\n        timer.stop()\n        return True\n\n    with concurrent.futures.ThreadPoolExecutor(max_workers=cores) as executor:\n        block = 0\n        while block &lt;= entries:\n            log.debug(\"Dispatching Block %d:%d\" % (block, block + chunk))\n            result = executor.submit(\n                importThread,\n                data[\"features\"][block : block + chunk],\n                self.connections[index],\n            )\n            block += chunk\n            index += 1\n        executor.shutdown()\n    timer.stop()\n\n    return True\n</code></pre>"},{"location":"api/#overturepy","title":"overture.py","text":"<p>               Bases: <code>object</code></p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>list</code> <p>The list of features</p> required Source code in <code>osm_rawdata/overture.py</code> <pre><code>def __init__(\n    self,\n    filespec: str = None,\n):\n    \"\"\"A class for parsing Overture V2 files.\n\n    Args:\n        data (list): The list of features\n    \"\"\"\n    # pfile = pq.ParquetFile(filespec)\n    # self.data = pfile.read()\n    if filespec:\n        try:\n            self.data = pd.read_parquet(filespec)\n            log.debug(f\"Read {len(self.data)} entries from {filespec}\")\n        except:\n            log.error(f\"Couldn't read data from {filespec}!\")\n    self.filespec = filespec\n</code></pre> <p>options: show_source: false heading_level: 3</p>"},{"location":"geofabrik/","title":"Geofabrik","text":"<p>This is a simple utility to download country data files from GeoFabrik.</p> <pre><code>options:\n--help(-h)            show this help message and exit\n--verbose(-v)         verbose output\n--file(-f) FILE       The country or US state to download\n--list(-l)            List all files on GeoFabrik\n</code></pre>"},{"location":"importer/","title":"importer.py","text":"<p>Import data into a postgres database that is using the Underpass schema. Currently only loading Parquet files from Overture is supported.</p>"},{"location":"importer/#example","title":"Example","text":"<pre><code>importer.py -u localhost/overture -i 20230725_211555_00082_tpd52_545781f2-efb6-4ea2-a9a0-b91ec5451b73\n\noptions:\n-h, --help                 show this help message and exit\n-v, --verbose              verbose output\n-i INFILE, --infile INFILE Input data file\n-u URI, --uri URI          Database URI\n\n    This should only be run standalone for debugging purposes.\n</code></pre>"},{"location":"json/","title":"JSON Config Syntax","text":"<p>This syntax is used by the HOT Export Tool, and it's FastAPI backend, Raw Data API. The YAML format was considered to be too simple for complex queries, so this JSON format was created to replace it. This is identical the the format used by those tools.</p>"},{"location":"json/#geometry","title":"Geometry","text":"<p>This is a GeoJson geometry that defines the project boundary. Since the database is huge, this limits the area the query is performed in.</p>"},{"location":"json/#filters","title":"Filters","text":"<p>The filters do the real work of this format. The tags keyword is followed by the desired geometry, which determine which database tables get searched. If all_geometry is supplied, then all the tables are queried. It can also be centroid, which then returns onl points.</p> <p>The syntax is the same for the join_or keyword, or the join_and keyword. It's a list of keyword/value pairs. If it's an empty list, this is the equivalant of using IS NOT NULL in SQL. If it has a value instead, then only features with that value are returned.</p>"},{"location":"json/#centroid","title":"Centroid","text":"<p>This is true or false on whether the result should only be centroids of all the geometries. The default is false if this is not present.</p>"},{"location":"json/#example","title":"Example","text":"<p>Unlike the YAML format that generates an SQL query, the raw data API wants this JSON file. This can be generated however from the YAML config file. If used as a config file, an identical version is generated from the parsed config data. This way it can be used for both input and output.</p> <p>This config file is for highway extracts.</p> <pre><code>{\n \"geometry\": {\n  \"type\": \"Polygon\",\n  \"coordinates\": [\n   [\n    [\n     [\n      -105.390892,\n      39.743926\n     ],\n     # More coordinates remove\n    ]\n   ]\n  ]\n },\n \"filters\": {\n  \"tags\": {\n   \"all_geometry\": {\n    \"join_or\": {\n     \"highway\": [],\n     \"waterway\": []\n    },\n    \"join_and\": {\n     \"bridge\": []\n    }\n   }\n  }\n },\n}\n</code></pre>"},{"location":"overture/","title":"Overture Map Data","text":"<p>The Overture Foundation (https://www.overturemaps.org) has been recently formed to build a competitor to Google Maps. The plan is to use OpenStreetMap (OSM) data as a baselayer, and layer other datasets on top. The currently available data (July 2023) has 13 different datasets in addition to the OSM data. It is available here. It also includes a snapshot of OSM data from the same time frame. Other than the OSM data and MS Footprints, all the current additional data is US specific, and often contains multiple copies of the same dataset, but from different organization.</p> <p>The Overture files are in Parquet format, which uses Arrow to store the data in a tabular fashion. The files are large, about 1.2G most of the time. Each file has features spread across the planet, instead of a subset in a geographical region. If you wish to get all the data for a region, you have to load all 120 files into a database.</p> <p>While Overture recommends using Amazon Athena or Microsoft Synapse, you can also use a database.</p> <p>Thee two primary databases are DuckDB, and Postgres, both of which have Parquet support. You can now also use ogr2ogr to import a parquet file into postgres. In these cases the database schema will resemble the Overture schema. Since HOT maintains it's own database schema that is also optimized for query performance, you can use the importer program to import into the Underpass schema. The importer utility can parse any of the data files that are using the V2 schema into GeoJson.</p>"},{"location":"overture/#schema","title":"Schema","text":"<p>There are two versions of the file schema. The original schemas had less columns in it, and each data type had a schema oriented towards that data type. The new schema (Oct 2023) is larger, but all the data types are supported in the same schema.</p> <p>The schema used in the Overture data files is documented here. This document is just a summary with some implementation details.</p>"},{"location":"overture/#buildings","title":"Buildings","text":"<p>The current coverage area is primarily the US, with New Zealand, and some random cities in Europe like Berlin. This is excluding the OpenStreetMap and Microsoft ML Buildings, which do have global coverage. But as those are available from other sources, which will often be more up to data than the Overture anyway. Conflation requires fresh data.</p> <p>The data appears to not be processed for duplicates or bad geometries, but that is what the Conflator and Underpass projects are for, to clean the data for possible imports. The license is Odbl, so suitable for OSM.</p>"},{"location":"overture/#the-current-list-of-buildings-datasets-in-v1-july-2023-is","title":"The current list of buildings datasets in V1 (July 2023) is","text":"<ul> <li>Austin Building Footprints Year 2013 2D Buildings</li> <li>Boston BPDA 3D Buildings</li> <li>City of Cambridge, MA Open Data 3D Buildings</li> <li>Denver Regional Council of Governments 2D Buildings</li> <li>Esri Buildings | Austin Building Footprints Year 2013 2D Buildings</li> <li>Esri Buildings | Denver Regional Council of Governments 2D Buildings</li> <li>Esri Community Maps</li> <li>Miami-Dade County Open Data 3D Buildings</li> <li>OpenStreetMap</li> <li>Microsoft ML Buildings</li> <li>NYC Open Data 3D Buildings</li> <li>Portland Building Footprint 2D Buildings</li> <li>USGS Lidar</li> <li>Washington DC Open Data 3D Buildings</li> </ul>"},{"location":"overture/#the-current-list-of-buildings-datasets-in-v2-oct-2023-is","title":"The current list of buildings datasets in V2 (Oct 2023) is","text":"<ul> <li>Portland Building Footprint 2D Buildings</li> <li>Esri Community Maps</li> <li>USGS Lidar</li> <li>Esri Buildings | Austin Building Footprints Year 2013 2D Buildings</li> <li>Esri Buildings | Denver Regional Council of Governments 2D Buildings</li> <li>City of Cambridge, MA Open Data 3D Buildings</li> <li>Miami-Dade County Open Data 3D Buildings</li> <li>Washington DC Open Data 3D Buildings</li> <li>Denver Regional Council of Governments 2D Buildings</li> <li>Boston BPDA 3D Buildings</li> <li>NYC Open Data 3D Buildings</li> <li>Austin Building Footprints Year 2013 2D Buildings</li> <li>OpenStreetMap</li> <li>Microsoft ML Buildings</li> </ul> <p>The primary columns of interest to OSM are the number of building floors, the height in meters, and the name if it has one. These columns are not set in all of the datasets, but where they exist, they can be added to OSM during conflation.</p> <p>As a warning, the USGS Lidar dataset has many really bad building geometries, so it's only the height column that is useful, if accurate. This dataset does appear to have many buildings not in the other datasets, but the geometries are barely usable. Conflation does add these as new buildings though, but will often require manual tracing to fix the geometries. This dataset is useful for finding many missing buildings, but is US only.</p>"},{"location":"overture/#places","title":"Places","text":"<p>The places data are POIs of places. This appears to be for amenities, and contains tags related to that OSM category. It has global coverage and is multi-lingual. This dataset is from Meta and the Microsoft. This dataset is licensed CDLA, which is a new license, but has been approved for imports into OSM.</p> <p>The columns that are of interest in the data to OSM are:</p> <ul> <li>freeform - The address of the amenity, although the format is not   consistent</li> <li>socials - An array of social media links for this amenity.</li> <li>phone - The phone number if it has one</li> <li>websites - The website URL if it has one</li> <li>value - The name of the amenity if known</li> <li>locality - The location on the planet, usually a city</li> </ul> <p>A quick scan seems to show personal data and not just amenities. There doesn't appear to be sufficient metadata to filter this automatically without following the link to their facebook page. There are many amenities though, but has the same problem.</p>"},{"location":"overture/#highways","title":"Highways","text":"<p>In the current highway segment data files, the only source currently is OSM. In that cases it's better to use up to date OSM data. It'll be interesting to see if Overture imports the publically available highway datasets from the USGS, or some state governments. That would be very useful. But otherwise the highway data is useless to improve map data.</p> <p>The Overture segments data files are equivalent to an OSM way, with tags specific to that highway linestring. There are separate data files for connections, that are equivalant to an OSM relation. Once again though, since all the data is currently from OSM, it's better to just use OSM data.</p>"},{"location":"overture/#admin-boundaries-and-base-data","title":"Admin Boundaries And Base Data","text":"<p>Currently all the data in these datsets is from OSM, so there is no reason to care about these files.</p>"},{"location":"overture/#special-columns","title":"Special Columns","text":""},{"location":"overture/#names","title":"names","text":"<p>The names column can have 4 variations on the name. Each may also have a language value as well.</p> <ul> <li>common</li> <li>official</li> <li>alternate</li> <li>short</li> </ul> <p>Each of these can have multiple values, each of which consists of a value and the language.</p>"},{"location":"overture/#sources","title":"sources","text":"<p>The sources column is an array of with two entries. The first entry is the name of the dataset, and where it exists, a recordID to reference the source dataset. For OSM data, the recordID has 3 sub-fields. The first character is the type, w (way), n (node), or l (line). The second is the OSM ID, and the third with a v is the version of the feature in OSM.</p> <p>For example: *w*123456v2 is a way with ID 123456 and is version 2.</p>"},{"location":"postgres/","title":"Postgres","text":"<p>This is a simple command line interface that uses the contained classes to make a data extract from OSM. This program extracts data from a local postgres data, or the remote Underpass one. A boundary polygon is used to define the area to be covered in the extract. Optionally a data file can be used.</p> <pre><code>options:\n--help(-h)               show this help message and exit\n--verbose(-v)            verbose output\n--uri(-u) URI            Database URI\n--boundary(-b) BOUNDARY  Boundary polygon to limit the data size\n--sql(-s) SQL            Custom SQL query to execute against the database\n--all(-a) ALL            All the geometry or just centroids\n--config(-c) CONFIG      The config file for the query (json or yaml)\n--outfile(-o) OUTFILE    The output file\n</code></pre>"},{"location":"wiki_redirect/","title":"OSM RawData","text":"<p>Please see the docs page at: https://hotosm.github.io/osm-rawdata/</p>"},{"location":"yaml/","title":"YAML Config Syntax","text":"<p>The YAML format is simpler than the JSON one, and is the format used by the osm-fieldwork project and the FMTM project for use in field data collection. This is used for canned datbase queires that are used to make data extracts for ODK Collect.</p>"},{"location":"yaml/#select","title":"select","text":"<p>If let blank, the tags in the keep section and where sections are used to return a subset of tags &amp; values, instead of all the tags.</p>"},{"location":"yaml/#from","title":"from","text":"<p>This is a list of the database tables. By default these are the tables used in the custom database schema created with the included raw.lua script for osm2pgsql.</p> <p>The tables are:</p> <ul> <li>nodes</li> <li>relations</li> <li>ways_line</li> <li>ways_poly</li> </ul>"},{"location":"yaml/#where","title":"where","text":"<p>The where section is a bit more complicated because we need to support a mix of OR and AND arguments. There is a limit to how complicated this can get, but sometimes it's easier to just do a little manual cleanup with the results.</p> <p>The syntax is the same for the join_or keyword, or the join_and keyword. If you want to query for any value of the keyword, as not_null, which later gets turned into IS NOT NULL in SQL. It has a value associated with the keyword, then that is the only value searching for.</p>"},{"location":"yaml/#keep","title":"keep","text":"<p>The tags in the keep field are the ones we want returned in the SQL query, but aren't part of the where section. Othwise they fail to appear in the results.</p>"},{"location":"yaml/#example","title":"Example","text":"<p>This config file is for building extracts.</p> <pre><code>select:\n  - name: title\nfrom:\n - nodes\n - ways_poly\nwhere:\n  tags:\n - join_or:\n  - { building: yes, amenity: not null }\n - join_and:\n  - { building:material: wood }\nkeep:\n - building:levels\n - building:material\n - roof:material\n - roof:shape\n - roof:levels\n - cusine\n - convenience\n - diesel\n - version\n</code></pre> <p>That then generates a list of SQL queries, one for each table in the database. Note that the table name has been changed to have _view appended. This is because a view has been created from each table using the project boundary.</p> <pre><code>SELECT ST_AsText(geom), osm_id, version, tags-&gt;&gt;'building:levels',\n tags-&gt;&gt;'building:material', tags-&gt;&gt;'roof:material',\n tags-&gt;&gt;'roof:shape', tags-&gt;&gt;'roof:levels', tags-&gt;&gt;'cusine',\n tags-&gt;&gt;'convenience', tags-&gt;&gt;'diesel', tags-&gt;&gt;'version',\n tags-&gt;&gt;'building', tags-&gt;&gt;'amenity',\n tags-&gt;&gt;'building:material' FROM ways_view WHERE (\n tags-&gt;&gt;'building'='yes' OR tags-&gt;&gt;'amenity' IS NOT NULL)  AND\n tags-&gt;&gt;'building:material'='wood'\n</code></pre>"}]}